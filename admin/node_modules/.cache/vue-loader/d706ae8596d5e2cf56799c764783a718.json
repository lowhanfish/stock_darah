{"remainingRequest":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/simplephi/Documents/riswan/stock_darah/admin/src/views/informasi/berita.vue?vue&type=template&id=41ed5882&","dependencies":[{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/src/views/informasi/berita.vue","mtime":1761360797910},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/babel-loader/lib/index.js","mtime":1758930419036},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1758930412642},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js","mtime":1758930412679},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/index.js","mtime":1758930412640}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImFib3V0ICIgc3R5bGU9InBhZGRpbmc6MTVweCI+CiAgICA8cS1jYXJkIGJvcmRlcmVkIGNsYXNzPSJteS1jYXJkIj4KICAgICAgICA8cS1jYXJkLXNlY3Rpb24gY2xhc3M9Im1haW4yIHRleHQtd2hpdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaXRlbXMtY2VudGVyIHEtY29sLWd1dHRlci1tZCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtaDYgaF90aXRsZUhlYWQiPkFydGlrZWwgLyBCZXJpdGE8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC0yIj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8IS0tIENhcmkgKyBUb21ib2wgQWRkIC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICA8cS1pbnB1dCB2LW1vZGVsPSJjYXJpX3ZhbHVlIiBAa2V5dXA9ImNhcmlfZGF0YSgpIiBvdXRsaW5lZCBzcXVhcmUgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSBjb2wgcS1tci1zbSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHEtYnRuIGdsb3NzeSBjbGFzcz0iY29sLWF1dG8iIGNvbG9yPSJncmVlbiIgQGNsaWNrPSJtZGxfYWRkID0gdHJ1ZSIgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249ImFkZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cS10b29sdGlwIGNvbnRlbnQtY2xhc3M9ImJnLWdyZWVuLTciIGNvbnRlbnQtc3R5bGU9ImZvbnQtc2l6ZTogMTNweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xpY2sgdW50dWsgbWVuYW1iYWggZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9xLXRvb2x0aXA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcS1idG4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CgogICAgPC9xLWNhcmQ+CgoKICAgIDxociBjbGFzcz0iaHJwYWdpbjIiPgoKICAgIDxkaXYgY2xhc3M9InRibF9yZXNwb25zaXZlIj4KICAgICAgICA8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBLT05URU5UID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC0tPgogICAgICAgIDx0YWJsZSB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgIDx0ciBjbGFzcz0iaF90YWJsZV9oZWFkIG1haW4xIHRleHQtd2hpdGUgIj4KICAgICAgICAgICAgICAgIDx0aCB3aWR0aD0iNSUiIGNsYXNzPSJ0ZXh0LWNlbnRlciI+Tm88L3RoPgogICAgICAgICAgICAgICAgPHRoIHdpZHRoPSIxMCUiPkZvdG88L3RoPgogICAgICAgICAgICAgICAgPHRoIHdpZHRoPSIzMCUiPkp1ZHVsPC90aD4KICAgICAgICAgICAgICAgIDx0aCB3aWR0aD0iMTUlIiBjbGFzcz0idGV4dC1jZW50ZXIiPkFjdDwvdGg+CiAgICAgICAgICAgICAgICA8IS0tIDx0aCB3aWR0aD0iMzAlIj5LZXRlcmFuZ2FuPC90aD4gLS0+CiAgICAgICAgICAgICAgICA8IS0tIDx0aCB3aWR0aD0iMTAlIj48L3RoPiAtLT4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyIGNsYXNzPSJoX3RhYmxlX2JvZHkiIHYtZm9yPSIoZGF0YSwgaW5kZXgpIGluIGxpc3RfZGF0YSIgOmtleT0iZGF0YS5pZCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj57eyBpbmRleGluZyhpbmRleCArIDEpIH19LjwvdGQ+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHYtaWY9ImRhdGEuZmlsZV9uYW1lIiA6c3JjPSJmaWxlX3BhdGggKyBkYXRhLmZpbGVfbmFtZSIgYWx0PSJmb3RvIgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWF4LXdpZHRoOiA4MHB4OyBib3JkZXItcmFkaXVzOiA2cHg7IGN1cnNvcjogcG9pbnRlcjsiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib3BlbkltYWdlKGZpbGVfcGF0aCArIGRhdGEuZmlsZV9uYW1lKSIgLz4KICAgICAgICAgICAgICAgICAgICA8cS1pY29uIHYtZWxzZSBuYW1lPSJpbWFnZV9ub3Rfc3VwcG9ydGVkIiBzaXplPSJzbSIgY29sb3I9ImdyZXkiIC8+CiAgICAgICAgICAgICAgICA8L3RkPiA8IS0tIEZvdG8gLS0+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1ib2xkIj57eyBkYXRhLmp1ZHVsIH19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1ibHVlIiBzdHlsZT0iZm9udC1zaXplOiAxMnB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGRhdGEuc3VtYmVyIH19CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L3RkPiA8IS0tIEp1ZHVsIC0tPgoKICAgICAgICAgICAgICAgIDwhLS0gPHRkPgogICAgICAgICAgICAgICAgICAgIDxkaXY+e3sgZGF0YS5kZXNrcmlwc2kgfX08L2Rpdj4KICAgICAgICAgICAgICAgIDwvdGQ+IC0tPgoKCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIHEtZ3V0dGVyLXNtIj4KICAgICAgICAgICAgICAgICAgICA8cS1idG4gZGVuc2Ugcm91bmQgY29sb3I9Indhcm5pbmciIGljb249ImVkaXQiIEBjbGljaz0ib3BlbkVkaXQoZGF0YSkiPgogICAgICAgICAgICAgICAgICAgICAgICA8cS10b29sdGlwIGNvbnRlbnQtY2xhc3M9ImJnLWFtYmVyLTciPkVkaXQgRGF0YTwvcS10b29sdGlwPgogICAgICAgICAgICAgICAgICAgIDwvcS1idG4+CiAgICAgICAgICAgICAgICAgICAgPHEtYnRuIGRlbnNlIHJvdW5kIGNvbG9yPSJuZWdhdGl2ZSIgaWNvbj0iZGVsZXRlIiBAY2xpY2s9Im9wZW5EZWxldGUoZGF0YSkiPgogICAgICAgICAgICAgICAgICAgICAgICA8cS10b29sdGlwIGNvbnRlbnQtY2xhc3M9ImJnLXJlZC03Ij5IYXB1cyBEYXRhPC9xLXRvb2x0aXA+CiAgICAgICAgICAgICAgICAgICAgPC9xLWJ0bj4KICAgICAgICAgICAgICAgICAgICA8cS1idG4gZGVuc2Ugcm91bmQgY29sb3I9InByaW1hcnkiIGljb249InZpc2liaWxpdHkiIEBjbGljaz0ib3BlbkxpaGF0KGRhdGEpIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHEtdG9vbHRpcCBjb250ZW50LWNsYXNzPSJiZy1ibHVlLTciPkxpaGF0IERhdGE8L3EtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgICA8L3EtYnRuPgogICAgICAgICAgICAgICAgPC90ZD4gPCEtLSBBY3QgLS0+CiAgICAgICAgICAgIDwvdHI+CgogICAgICAgIDwvdGFibGU+CgogICAgICAgIDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEtPTlRFTlQgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gLS0+CiAgICA8L2Rpdj4KCiAgICA8aHIgY2xhc3M9ImhycGFnaW4iPgogICAgPGJyPgogICAgPGRpdiBjbGFzcz0iZmxleCBmbGV4LWNlbnRlciI+CiAgICAgICAgPHEtcGFnaW5hdGlvbiB2LW1vZGVsPSJwYWdlX2ZpcnN0IiA6bWF4PSJwYWdlX2xhc3QiIDptYXgtcGFnZXM9IjQiIGNvbG9yPSJncmV5LTYiIDpkaXJlY3Rpb24tbGlua3M9InRydWUiCiAgICAgICAgICAgIDpib3VuZGFyeS1saW5rcz0idHJ1ZSIgaWNvbi1maXJzdD0ic2tpcF9wcmV2aW91cyIgaWNvbi1sYXN0PSJza2lwX25leHQiIGljb24tcHJldj0iZmFzdF9yZXdpbmQiCiAgICAgICAgICAgIGljb24tbmV4dD0iZmFzdF9mb3J3YXJkIiBAaW5wdXQ9ImdldFZpZXciIC8+CiAgICA8L2Rpdj4KCiAgICA8IS0tID09PT09PT09PT09PT09PT09PT09PSBNT0RBTCBBREQgQkVSSVRBID09PT09PT09PT09PT09PT09PT09PSAtLT4KICAgIDxxLWRpYWxvZyB2LW1vZGVsPSJtZGxfYWRkIiBwZXJzaXN0ZW50PgogICAgICAgIDxxLWNhcmQgY2xhc3M9Im1kbC1tZCI+CiAgICAgICAgICAgIDxxLWNhcmQtc2VjdGlvbiBjbGFzcz0ibWFpbjIgdGV4dC13aGl0ZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWg2IGhfbW9kYWxoZWFkIj5UYW1iYWggQmVyaXRhIC8gQ1NSPC9kaXY+CiAgICAgICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CgogICAgICAgICAgICA8Zm9ybSBAc3VibWl0LnByZXZlbnQ9ImFkZERhdGEoKSI+CgogICAgICAgICAgICAgICAgPHEtY2FyZC1zZWN0aW9uIGNsYXNzPSJxLXB0LW5vbmUiPgoKICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhycGFnaW4yIj4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBKdWR1bCAtLT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+SnVkdWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHEtaW5wdXQgdi1tb2RlbD0iZm9ybS5qdWR1bCIgb3V0bGluZWQgc3F1YXJlIGRlbnNlIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiAvPgoKICAgICAgICAgICAgICAgICAgICA8IS0tIFN1bWJlciAtLT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+U3VtYmVyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImZvcm0uc3VtYmVyIiBvdXRsaW5lZCBzcXVhcmUgZGVuc2UgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CgogICAgICAgICAgICAgICAgICAgIDwhLS0gRGVza3JpcHNpIC0tPgogICAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gY2xhc3M9ImhfbGFibGUiPkRlc2tyaXBzaSBTaW5na2F0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImZvcm0uZGVza3JpcHNpIiB0eXBlPSJ0ZXh0YXJlYSIgb3V0bGluZWQgc3F1YXJlIGRlbnNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiAvPiAtLT4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBJc2kgLyBEZXRhaWwgQmVyaXRhIC0tPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5Jc2k8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHEtZWRpdG9yIHYtbW9kZWw9ImZvcm0uaXNpIiA6dG9vbGJhcj0iZWRpdG9yVG9vbGJhciIgcGxhY2Vob2xkZXI9IlR1bGlzIGlzaSBiZXJpdGEuLi4iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSIgLz4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBMYW1waXJhbiBGaWxlIC0tPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5MYW1waXJhbiBGaWxlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxxLWZpbGUgdi1tb2RlbD0iZm9ybS5maWxlX25hbWUiIGxhYmVsPSJQaWxpaCBGaWxlIiBvdXRsaW5lZCBzcXVhcmUgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CgogICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0iaHJwYWdpbjIiPgoKICAgICAgICAgICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CgogICAgICAgICAgICAgICAgPHEtY2FyZC1hY3Rpb25zIGNsYXNzPSJiZy1ncmV5LTQgbWRsLWZvb3RlciIgYWxpZ249InJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICA8cS1idG4gOmxvYWRpbmc9ImJ0bl9hZGQiIGNvbG9yPSJ3YXJuaW5nIiB0eXBlPSJzdWJtaXQiIGxhYmVsPSJTaW1wYW4iIC8+CiAgICAgICAgICAgICAgICAgICAgPHEtYnRuIGxhYmVsPSJCYXRhbCIgY29sb3I9Im5lZ2F0aXZlIiB2LWNsb3NlLXBvcHVwIC8+CiAgICAgICAgICAgICAgICA8L3EtY2FyZC1hY3Rpb25zPgoKICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvcS1jYXJkPgogICAgPC9xLWRpYWxvZz4KICAgIDwhLS0gPT09PT09PT09PT09PT09PT09PT09IE1PREFMIEFERCBCRVJJVEEgPT09PT09PT09PT09PT09PT09PT09IC0tPgoKICAgIDwhLS0gPT09PT09PT09PT09PT09PT09PT09IE1PREFMIEVESVQgQkVSSVRBID09PT09PT09PT09PT09PT09PT09PSAtLT4KICAgIDxxLWRpYWxvZyB2LW1vZGVsPSJtZGxfZWRpdCIgcGVyc2lzdGVudD4KICAgICAgICA8cS1jYXJkIGNsYXNzPSJtZGwtbWQiPgogICAgICAgICAgICA8cS1jYXJkLXNlY3Rpb24gY2xhc3M9Im1haW4yIHRleHQtd2hpdGUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1oNiBoX21vZGFsaGVhZCI+RWRpdCBCZXJpdGEgLyBDU1I8L2Rpdj4KICAgICAgICAgICAgPC9xLWNhcmQtc2VjdGlvbj4KCiAgICAgICAgICAgIDxmb3JtIEBzdWJtaXQucHJldmVudD0idXBkYXRlRGF0YSgpIj4KCiAgICAgICAgICAgICAgICA8cS1jYXJkLXNlY3Rpb24gY2xhc3M9InEtcHQtbm9uZSI+CgogICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0iaHJwYWdpbjIiPgoKICAgICAgICAgICAgICAgICAgICA8IS0tIEp1ZHVsIC0tPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5KdWR1bDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cS1pbnB1dCB2LW1vZGVsPSJmb3JtLmp1ZHVsIiBvdXRsaW5lZCBzcXVhcmUgZGVuc2UgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CgogICAgICAgICAgICAgICAgICAgIDwhLS0gU3VtYmVyIC0tPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5TdW1iZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHEtaW5wdXQgdi1tb2RlbD0iZm9ybS5zdW1iZXIiIG91dGxpbmVkIHNxdWFyZSBkZW5zZSBjbGFzcz0iYmctd2hpdGUgbWFyZ2luX2J0biIgLz4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBEZXNrcmlwc2kgLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+RGVza3JpcHNpIFNpbmdrYXQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHEtaW5wdXQgdi1tb2RlbD0iZm9ybS5kZXNrcmlwc2kiIHR5cGU9InRleHRhcmVhIiBvdXRsaW5lZCBzcXVhcmUgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+IC0tPgoKICAgICAgICAgICAgICAgICAgICA8IS0tIElzaSAvIERldGFpbCBCZXJpdGEgLS0+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPklzaTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cS1lZGl0b3Igdi1tb2RlbD0iZm9ybS5pc2kiIDp0b29sYmFyPSJlZGl0b3JUb29sYmFyIiBwbGFjZWhvbGRlcj0iVHVsaXMgaXNpIGJlcml0YS4uLiIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIiAvPgoKICAgICAgICAgICAgICAgICAgICA8IS0tIExhbXBpcmFuIEZpbGUgLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBGaWxlIFVwbG9hZCAtLT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+TGFtcGlyYW4gRmlsZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cS1maWxlIHYtbW9kZWw9ImZpbGVCYXJ1IiBsYWJlbD0iUGlsaWggRmlsZSBCYXJ1IChvcHNpb25hbCkiIG91dGxpbmVkIHNxdWFyZSBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmctd2hpdGUgbWFyZ2luX2J0biIgLz4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBQcmV2aWV3IGppa2EgYWRhIGZpbGUgbGFtYSAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImZvcm0uZmlsZV9uYW1lICYmICFmaWxlQmFydSIgY2xhc3M9InEtbXQtc20iPgogICAgICAgICAgICAgICAgICAgICAgICA8cS1pbWcgOnNyYz0iZmlsZV9wYXRoICsgZm9ybS5maWxlX25hbWUiIHN0eWxlPSJtYXgtd2lkdGg6IDE1MHB4OyBib3JkZXItcmFkaXVzOiA2cHg7IiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNhcHRpb24gdGV4dC1ncmV5Ij5GaWxlIGxhbWE8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhycGFnaW4yIj4KCiAgICAgICAgICAgICAgICA8L3EtY2FyZC1zZWN0aW9uPgoKICAgICAgICAgICAgICAgIDxxLWNhcmQtYWN0aW9ucyBjbGFzcz0iYmctZ3JleS00IG1kbC1mb290ZXIiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgPHEtYnRuIDpsb2FkaW5nPSJidG5fZWRpdCIgY29sb3I9InByaW1hcnkiIHR5cGU9InN1Ym1pdCIgbGFiZWw9IlVwZGF0ZSIgLz4KICAgICAgICAgICAgICAgICAgICA8cS1idG4gbGFiZWw9IkJhdGFsIiBjb2xvcj0ibmVnYXRpdmUiIHYtY2xvc2UtcG9wdXAgLz4KICAgICAgICAgICAgICAgIDwvcS1jYXJkLWFjdGlvbnM+CgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9xLWNhcmQ+CiAgICA8L3EtZGlhbG9nPgogICAgPCEtLSA9PT09PT09PT09PT09PT09PT09PT0gTU9EQUwgRURJVCBCRVJJVEEgPT09PT09PT09PT09PT09PT09PT09IC0tPgoKICAgIDxxLWRpYWxvZyB2LW1vZGVsPSJtZGxfbGloYXQiIHBlcnNpc3RlbnQ+CiAgICAgICAgPHEtY2FyZCBjbGFzcz0ibWRsLWxnIHEtcGEtbm9uZSIgc3R5bGU9Im1heC13aWR0aDogOTAwcHg7IGJvcmRlci1yYWRpdXM6IDE2cHg7IG92ZXJmbG93OiBoaWRkZW47Ij4KICAgICAgICAgICAgPHEtY2FyZC1zZWN0aW9uIGNsYXNzPSJtYWluMiB0ZXh0LXdoaXRlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtaDYgaF9tb2RhbGhlYWQiPmxpaGF0IEJlcml0YTwvZGl2PgogICAgICAgICAgICA8L3EtY2FyZC1zZWN0aW9uPgoKCgogICAgICAgICAgICA8IS0tIEtvbnRlbiBTY3JvbGxhYmxlIC0tPgogICAgICAgICAgICA8cS1jYXJkLXNlY3Rpb24gY2xhc3M9InEtcGEtbGcgc2Nyb2xsIiBzdHlsZT0ibWF4LWhlaWdodDogNzB2aDsgb3ZlcmZsb3cteTogYXV0bzsiPgogICAgICAgICAgICAgICAgPCEtLSBKdWR1bCAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtaDUgdGV4dC1wcmltYXJ5IHRleHQtYm9sZCBxLW1iLW1kIj57eyBmb3JtLmp1ZHVsIH19PC9kaXY+CgogICAgICAgICAgICAgICAgPCEtLSBJbmZvIE1ldGEgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWdyZXktNyBxLW1iLW1kIiBzdHlsZT0iZm9udC1zaXplOiAxNHB4OyI+CiAgICAgICAgICAgICAgICAgICAgPHEtaWNvbiBuYW1lPSJmZWVkIiBzaXplPSIxNnB4IiBjbGFzcz0icS1tci14cyIgLz4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icS1tci1tZCI+U3VtYmVyOiA8c3BhbiBjbGFzcz0idGV4dC1ibHVlIj57eyBmb3JtLnN1bWJlciB9fTwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHEtaWNvbiBuYW1lPSJldmVudCIgc2l6ZT0iMTZweCIgY2xhc3M9InEtbXIteHMiIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgVU1VTS50Z2xDb252ZXJ0KGZvcm0uY3JlYXRlQXQpIH19PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPCEtLSBEZXNrcmlwc2kgLS0+CiAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9InEtbWItbWQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtc3VidGl0bGUyIHRleHQtYm9sZCI+RGVza3JpcHNpIFNpbmdrYXQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJvZHkyIHRleHQtZ3JleS04Ij57eyBmb3JtLmRlc2tyaXBzaSB9fTwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+IC0tPgoKICAgICAgICAgICAgICAgIDwhLS0gSXNpIC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icS1tYi1tZCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zdWJ0aXRsZTIgdGV4dC1ib2xkIj5Jc2kgQmVyaXRhPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1ib2R5MSBxLW10LXNtIiB2LWh0bWw9ImZvcm0uaXNpIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3EtY2FyZC1zZWN0aW9uPgoKICAgICAgICAgICAgPCEtLSBGb290ZXIgLS0+CiAgICAgICAgICAgIDxxLXNlcGFyYXRvciAvPgogICAgICAgICAgICA8cS1jYXJkLWFjdGlvbnMgY2xhc3M9ImJnLWdyZXktNCBtZGwtZm9vdGVyIiBhbGlnbj0icmlnaHQiPgogICAgICAgICAgICAgICAgPHEtYnRuIGxhYmVsPSJUdXR1cCIgY29sb3I9Im5lZ2F0aXZlIiB2LWNsb3NlLXBvcHVwIC8+CiAgICAgICAgICAgIDwvcS1jYXJkLWFjdGlvbnM+CiAgICAgICAgPC9xLWNhcmQ+CiAgICA8L3EtZGlhbG9nPgoKCgoKICAgIDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IE1PREFMIEhBUFVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAtLT4KICAgIDxxLWRpYWxvZyB2LW1vZGVsPSJtZGxfZGVsZXRlIiBwZXJzaXN0ZW50PgogICAgICAgIDxxLWNhcmQgY2xhc3M9Im1kbC1zbSAiPgogICAgICAgICAgICA8cS1jYXJkLXNlY3Rpb24gY2xhc3M9InEtcHQtbm9uZSB0ZXh0LWNlbnRlciBvcmFnZUdyYWQiPgogICAgICAgICAgICAgICAgPGZvcm0gQHN1Ym1pdC5wcmV2ZW50PSJyZW1vdmVEYXRhIj4KICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltZy9hbGVydC5wbmciIGFsdD0iIiB3aWR0aD0iNzUiPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imhfbm90aWZpa2FzaSI+QVBBS0FIIEFOREEgWUFLSU4gSU5HSU4gTUVOR0hBUFVTIERBVEEgSU5JPz88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogLTk5OTlweCIgLz4KICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgPGJyPgoKICAgICAgICAgICAgICAgICAgICA8cS1idG4gbGFiZWw9IkJhdGFsIiBzaXplPSJzbSIgY29sb3I9Im5lZ2F0aXZlIiB2LWNsb3NlLXBvcHVwIC8+CiAgICAgICAgICAgICAgICAgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgPHEtYnRuIHR5cGU9InN1Ym1pdCIgbGFiZWw9IkhhcHVzIiBzaXplPSJzbSIgY29sb3I9InByaW1hcnkiIHYtY2xvc2UtcG9wdXAgLz4KCiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CiAgICAgICAgPC9xLWNhcmQ+CiAgICA8L3EtZGlhbG9nPgoKICAgIDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IE1PREFMIEhBUFVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAtLT4KCiAgICA8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBNT0RBTCBJTUcgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC0tPgoKICAgIDxxLWRpYWxvZyB2LW1vZGVsPSJtZGxfaW1hZ2UiPgogICAgICAgIDxxLWNhcmQgY2xhc3M9ImJnLXB1cnBsZSBtZGwtbGciPgogICAgICAgICAgICA8cS1jYXJkLXNlY3Rpb24gY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxxLWltZyA6c3JjPSJzZWxlY3RlZEltYWdlIiBzdHlsZT0ibWF4LXdpZHRoOiA5MHZ3OyBtYXgtaGVpZ2h0OiA5MHZoOyBib3JkZXItcmFkaXVzOiAxMHB4OyIKICAgICAgICAgICAgICAgICAgICBmaXQ9ImNvbnRhaW4iIC8+CiAgICAgICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CiAgICAgICAgICAgIDxxLWNhcmQtYWN0aW9ucyBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgICAgICAgIDxxLWJ0biBmbGF0IGxhYmVsPSJUdXR1cCIgY29sb3I9IndoaXRlIiB2LWNsb3NlLXBvcHVwIC8+CiAgICAgICAgICAgIDwvcS1jYXJkLWFjdGlvbnM+CiAgICAgICAgPC9xLWNhcmQ+CiAgICA8L3EtZGlhbG9nPgoKICAgIDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IE1PREFMIElNRyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gLS0+CgoKPC9kaXY+Cg=="},null]}