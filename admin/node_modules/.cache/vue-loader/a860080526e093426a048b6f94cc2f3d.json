{"remainingRequest":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/simplephi/Documents/riswan/stock_darah/admin/src/views/dataMaster/regisPendonor.vue?vue&type=template&id=29fd07c2&","dependencies":[{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/src/views/dataMaster/regisPendonor.vue","mtime":1761490468417},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/babel-loader/lib/index.js","mtime":1758930419036},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1758930412642},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js","mtime":1758930412679},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/index.js","mtime":1758930412640}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}