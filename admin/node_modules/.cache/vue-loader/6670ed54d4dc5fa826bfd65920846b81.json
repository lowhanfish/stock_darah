{"remainingRequest":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/simplephi/Documents/riswan/stock_darah/admin/src/views/dataMaster/regisMasy.vue?vue&type=template&id=1839c1cf&","dependencies":[{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/src/views/dataMaster/regisMasy.vue","mtime":1759536046559},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/babel-loader/lib/index.js","mtime":1758930419036},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1758930412642},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js","mtime":1758930412679},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/vue-loader/lib/index.js","mtime":1758930412640}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImFib3V0IiBzdHlsZT0icGFkZGluZzoxNXB4Ij4KICAgPHEtY2FyZCBib3JkZXJlZCBjbGFzcz0ibXktY2FyZCI+CiAgICAgIDxxLWNhcmQtc2VjdGlvbiBjbGFzcz0ibWFpbjIgdGV4dC13aGl0ZSI+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtaDYgaF90aXRsZUhlYWQiPlJlZ2lzdHJhc2kgTWFzeWFyYWthdDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC0yIj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgPHEtaW5wdXQgdi1tb2RlbD0iY2FyaV92YWx1ZSIgQGtleXVwPSJjYXJpX2RhdGEoKSIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIgY2xhc3M9ImJnLXdoaXRlIgogICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6OTAlIiAvPgogICAgICAgICAgICAgICAgICA8cS1idG4gZ2xvc3N5IGNsYXNzPSJtYWluMXgiIEBjbGljaz0ibWRsX2FkZCA9IHRydWUiIGRlbnNlIGZsYXQgaWNvbj0iYWRkIiBzdHlsZT0id2lkdGg6MTAlIj4KICAgICAgICAgICAgICAgICAgICAgPHEtdG9vbHRpcCBjb250ZW50LWNsYXNzPSJiZy1ibHVlLTkiIGNvbnRlbnQtc3R5bGU9ImZvbnQtc2l6ZTogMTNweCI+CiAgICAgICAgICAgICAgICAgICAgICAgIENsaWNrIHVudHVrIG1lbmFtYmFoIGRhdGEKICAgICAgICAgICAgICAgICAgICAgPC9xLXRvb2x0aXA+CiAgICAgICAgICAgICAgICAgIDwvcS1idG4+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CgogICAgICA8cS1zZXBhcmF0b3IgZGFyayBpbnNldCAvPgoKICAgICAgPHEtY2FyZC1zZWN0aW9uPgogICAgICAgICA8aHIgY2xhc3M9ImhycGFnaW4yIj4KICAgICAgICAgPGRpdiBjbGFzcz0idGJsX3Jlc3BvbnNpdmUiPgogICAgICAgICAgICA8dGFibGUgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9ImhfdGFibGVfaGVhZCBtYWluMnggdGV4dC13aGl0ZSI+CiAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgPHRoIHdpZHRoPSI1JSIgY2xhc3M9InRleHQtY2VudGVyIj5ObzwvdGg+CiAgICAgICAgICAgICAgICAgICAgIDx0aCB3aWR0aD0iMjAlIj5OYW1hIExlbmdrYXA8L3RoPgogICAgICAgICAgICAgICAgICAgICA8dGggd2lkdGg9IjE1JSI+TklLPC90aD4KICAgICAgICAgICAgICAgICAgICAgPHRoIHdpZHRoPSIxNSUiPlRUTDwvdGg+CiAgICAgICAgICAgICAgICAgICAgIDx0aCB3aWR0aD0iMTUlIj5ObyBIUDwvdGg+CiAgICAgICAgICAgICAgICAgICAgIDx0aCB3aWR0aD0iMTAlIj5KZW5pcyBLZWxhbWluPC90aD4KICAgICAgICAgICAgICAgICAgICAgPHRoIHdpZHRoPSIxMCUiPlVzZXJuYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICAgPHRoIHdpZHRoPSIxMCUiIGNsYXNzPSJ0ZXh0LWNlbnRlciI+QWtzaTwvdGg+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgPHRyIHYtZm9yPSIoZGF0YSwgaW5kZXgpIGluIGxpc3RfZGF0YSIgOmtleT0iZGF0YS5pZCArICctJyArIGluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWNlbnRlciI+e3sgaW5kZXhpbmcoaW5kZXggKyAxKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBkYXRhLm5hbWFfbGVuZ2thcCB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBkYXRhLm5payB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBVTVVNLnRnbENvbnZlcnQoZGF0YS50YW5nZ2FsX2xhaGlyKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBkYXRhLm5vX2hwIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGRhdGEuamVuaXNfa2VsYW1pbiB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBkYXRhLnVzZXJuYW1lIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxLWl0ZW0tc2VjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC13aGl0ZSBxLWd1dHRlci14cyB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxLWJ0biBzaXplPSIxMnB4IiBkZW5zZSBnbG9zc3kgcm91bmQgaWNvbj0ic2V0dGluZ3MiIGNsYXNzPSJtYWluMXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cS1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cS1saXN0IGRlbnNlIHN0eWxlPSJtaW4td2lkdGg6IDEwMHB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHEtaXRlbSBjbGlja2FibGUgdi1jbG9zZS1wb3B1cCBAY2xpY2s9Im1kbF9saWhhdCA9IHRydWUsIHNlbGVjdERhdGEoZGF0YSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cS1pdGVtLXNlY3Rpb24+TGloYXQgRGV0YWlsPC9xLWl0ZW0tc2VjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9xLWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxLXNlcGFyYXRvciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cS1pdGVtIGNsaWNrYWJsZSB2LWNsb3NlLXBvcHVwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ibWRsX3Bhc3N3b3JkID0gdHJ1ZSwgc2VsZWN0RGF0YShkYXRhKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxLWl0ZW0tc2VjdGlvbj5FZGl0IFBhc3N3b3JkPC9xLWl0ZW0tc2VjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9xLWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxLXNlcGFyYXRvciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cS1pdGVtIGNsaWNrYWJsZSB2LWNsb3NlLXBvcHVwIEBjbGljaz0iZWRpdE1vZGFsKGRhdGEpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHEtaXRlbS1zZWN0aW9uPkVkaXQ8L3EtaXRlbS1zZWN0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3EtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHEtc2VwYXJhdG9yIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxLWl0ZW0gY2xpY2thYmxlIHYtY2xvc2UtcG9wdXAgQGNsaWNrPSJtZGxfaGFwdXMgPSB0cnVlLCBzZWxlY3REYXRhKGRhdGEpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHEtaXRlbS1zZWN0aW9uPkhhcHVzPC9xLWl0ZW0tc2VjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9xLWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxLXNlcGFyYXRvciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3EtbGlzdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9xLW1lbnU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcS1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L3EtaXRlbS1zZWN0aW9uPgogICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICA8L2Rpdj4KCiAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXggZmxleC1jZW50ZXIgcS1tdC1tZCI+CiAgICAgICAgICAgIDxxLXBhZ2luYXRpb24gdi1tb2RlbD0icGFnZV9maXJzdCIgOm1heD0icGFnZV9sYXN0IiBAdXBkYXRlOm1vZGVsLXZhbHVlPSJnZXRWaWV3KCkiIGNvbG9yPSJncmV5LTYiCiAgICAgICAgICAgICAgIDptYXgtcGFnZXM9IjQiIDpkaXJlY3Rpb24tbGlua3M9InRydWUiIDpib3VuZGFyeS1saW5rcz0idHJ1ZSIgLz4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CiAgIDwvcS1jYXJkPgoKICAgPCEtLSA9PT09PT09PT09PT09PT09PT09PT0gTU9EQUwgQUREID09PT09PT09PT09PT09PT09PT09PSAtLT4KICAgPHEtZGlhbG9nIHYtbW9kZWw9Im1kbF9hZGQiIHBlcnNpc3RlbnQ+CiAgICAgIDxxLWNhcmQgY2xhc3M9Im1kbC1tZCI+CiAgICAgICAgIDxxLWNhcmQtc2VjdGlvbiBjbGFzcz0ibWFpbjIgdGV4dC13aGl0ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtaDYgaF9tb2RhbGhlYWQiPlRhbWJhaCBNYXN5YXJha2F0PC9kaXY+CiAgICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CgogICAgICAgICA8Zm9ybSBAc3VibWl0LnByZXZlbnQ9ImFkZERhdGEoKSI+CgogICAgICAgICAgICA8cS1jYXJkLXNlY3Rpb24gY2xhc3M9InEtcHQtbm9uZSI+CgogICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhycGFnaW4yIj4KCiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5OYW1hIExlbmdrYXA8L3NwYW4+CiAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImZvcm0ubmFtYV9sZW5na2FwIiBvdXRsaW5lZCBzcXVhcmUgcmVxdWlyZWQgOmRlbnNlPSJ0cnVlIgogICAgICAgICAgICAgICAgICBjbGFzcz0iYmctd2hpdGUgbWFyZ2luX2J0biIgLz4KCiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5OSUsgLyBOb21vciBJZGVudGl0YXMgKE9wc2lvbmFsLCBkaXNhcmFua2FuKTwvc3Bhbj4KICAgICAgICAgICAgICAgPHEtaW5wdXQgdi1tb2RlbD0iZm9ybS5uaWsiIG91dGxpbmVkIHNxdWFyZSA6ZGVuc2U9InRydWUiIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiAvPgoKICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHEtY29sLWd1dHRlci1tZCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPlRhbmdnYWwgTGFoaXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImZvcm0udGFuZ2dhbF9sYWhpciIgdHlwZT0iZGF0ZSIgb3V0bGluZWQgcmVxdWlyZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+SmVuaXMgS2VsYW1pbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgPHEtc2VsZWN0IHYtbW9kZWw9ImZvcm0uamVuaXNfa2VsYW1pbiIgOm9wdGlvbnM9IlsKICAgICAgICAgICAgICAgICAgICAgeyBsYWJlbDogJ0xha2ktbGFraScsIHZhbHVlOiAnTCcgfSwKICAgICAgICAgICAgICAgICAgICAgeyBsYWJlbDogJ1BlcmVtcHVhbicsIHZhbHVlOiAnUCcgfQogICAgICAgICAgICAgICAgICBdIiBvdXRsaW5lZCBlbWl0LXZhbHVlIG1hcC1vcHRpb25zIHJlcXVpcmVkIHNxdWFyZSA6ZGVuc2U9InRydWUiIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcS1jb2wtZ3V0dGVyLW1kIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+RW1haWwgKE9wc2lvbmFsLCBkaXNhcmFua2FuKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgPHEtaW5wdXQgdi1tb2RlbD0iZm9ybS5lbWFpbCIgdHlwZT0iZW1haWwiIG91dGxpbmVkIHNxdWFyZSA6ZGVuc2U9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPk5vIEhQIChXYWppYiwgdmVyaWZpa2FzaSBPVFAgZGlzYXJhbmthbik8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImZvcm0ubm9faHAiIHR5cGU9InRlbCIgb3V0bGluZWQgc3F1YXJlIHJlcXVpcmVkIDpkZW5zZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBxLWNvbC1ndXR0ZXItbWQgbWFyZ2luX2J0biI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPkthYnVwYXRlbiAoT3BzaW9uYWwpPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICA8cS1zZWxlY3Qgdi1tb2RlbD0iZm9ybS5rYWJ1cGF0ZW5faWQiIDpvcHRpb25zPSJrYWJ1cGF0ZW5PcHRpb25zIiBvdXRsaW5lZCBzcXVhcmUgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgICAgZW1pdC12YWx1ZSBtYXAtb3B0aW9ucyAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPktlY2FtYXRhbiAoT3BzaW9uYWwpPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICA8cS1zZWxlY3Qgdi1tb2RlbD0iZm9ybS5rZWNhbWF0YW5faWQiIDpvcHRpb25zPSJrZWNhbWF0YW5PcHRpb25zIiBvdXRsaW5lZCBzcXVhcmUgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgICAgZW1pdC12YWx1ZSBtYXAtb3B0aW9ucyA6ZGlzYWJsZT0iIWZvcm0ua2FidXBhdGVuX2lkIiAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+RGVzYS9LZWx1cmFoYW4gKE9wc2lvbmFsKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgPHEtc2VsZWN0IHYtbW9kZWw9ImZvcm0uZGVzX2tlbF9pZCIgOm9wdGlvbnM9ImRlc2tlbE9wdGlvbnMiIG91dGxpbmVkIHNxdWFyZSBkZW5zZSBlbWl0LXZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC1vcHRpb25zIDpkaXNhYmxlPSIhZm9ybS5rZWNhbWF0YW5faWQiIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5BbGFtYXQgKE9wc2lvbmFsIHNlc3VhaSBSUyk8L3NwYW4+CiAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImZvcm0uYWxhbWF0IiB0eXBlPSJ0ZXh0YXJlYSIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CgogICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+Rm90byBQcm9maWwgKE9wc2lvbmFsKTwvc3Bhbj4KICAgICAgICAgICAgICAgPHEtZmlsZSB2LW1vZGVsPSJmb3JtLmZvdG9fcHJvZmlsIiBsYWJlbD0iUGlsaWggRm90byIgYWNjZXB0PSJpbWFnZS8qIiBvdXRsaW5lZCBzcXVhcmUgZGVuc2UKICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CgogICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhycGFnaW4yIj4KCiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlICI+VXNlcm5hbWU8L3NwYW4+CiAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImRhdGFrdS51c2VybmFtZSIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CgogICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSAiPlBhc3N3b3JkPC9zcGFuPgogICAgICAgICAgICAgICA8cS1pbnB1dCB0eXBlPSJwYXNzd29yZCIgdi1tb2RlbD0iZGF0YWt1LnBhc3N3b3JkIiBvdXRsaW5lZCBzcXVhcmUgOmRlbnNlPSJ0cnVlIgogICAgICAgICAgICAgICAgICBjbGFzcz0iYmctd2hpdGUgbWFyZ2luX2J0biIgLz4KCiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlICI+Q29uZmlybSBQYXNzd29yZDwvc3Bhbj4KICAgICAgICAgICAgICAgPHEtaW5wdXQgdHlwZT0icGFzc3dvcmQiIHYtbW9kZWw9ImRhdGFrdS5jb25maXJtUGFzc3dvcmQiIG91dGxpbmVkIHNxdWFyZSA6ZGVuc2U9InRydWUiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiAvPgoKICAgICAgICAgICAgICAgPGhyIGNsYXNzPSJocnBhZ2luMiI+CgogICAgICAgICAgICA8L3EtY2FyZC1zZWN0aW9uPgoKICAgICAgICAgICAgPHEtY2FyZC1hY3Rpb25zIGNsYXNzPSJiZy1ncmV5LTQgbWRsLWZvb3RlciIgYWxpZ249InJpZ2h0Ij4KICAgICAgICAgICAgICAgPHEtYnRuIDpsb2FkaW5nPSJidG5fYWRkIiBjb2xvcj0icHJpbWFyeSIgdHlwZT0ic3VibWl0IiBsYWJlbD0iU2ltcGFuIiAvPgogICAgICAgICAgICAgICA8cS1idG4gbGFiZWw9IkJhdGFsIiBjb2xvcj0ibmVnYXRpdmUiIHYtY2xvc2UtcG9wdXAgLz4KICAgICAgICAgICAgPC9xLWNhcmQtYWN0aW9ucz4KICAgICAgICAgPC9mb3JtPgogICAgICA8L3EtY2FyZD4KICAgPC9xLWRpYWxvZz4KCiAgIDwhLS0gPT09PT09PT09PT09PT09PT09PT09IE1PREFMIEVESVQgPT09PT09PT09PT09PT09PT09PT09IC0tPgogICA8cS1kaWFsb2cgdi1tb2RlbD0ibWRsX2VkaXQiIHBlcnNpc3RlbnQ+CiAgICAgIDxxLWNhcmQgY2xhc3M9Im1kbC1tZCI+CiAgICAgICAgIDxxLWNhcmQtc2VjdGlvbiBjbGFzcz0iYmctb3JhbmdlIHRleHQtd2hpdGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWg2IGhfbW9kYWxoZWFkIj5FZGl0IE1hc3lhcmFrYXQ8L2Rpdj4KICAgICAgICAgPC9xLWNhcmQtc2VjdGlvbj4KCiAgICAgICAgIDxmb3JtIEBzdWJtaXQucHJldmVudD0idXBkYXRlRGF0YSgpIj4KCiAgICAgICAgICAgIDxxLWNhcmQtc2VjdGlvbiBjbGFzcz0icS1wdC1ub25lIj4KCiAgICAgICAgICAgICAgIDxociBjbGFzcz0iaHJwYWdpbjIiPgoKICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPk5hbWEgTGVuZ2thcDwvc3Bhbj4KICAgICAgICAgICAgICAgPHEtaW5wdXQgdi1tb2RlbD0iZm9ybS5uYW1hX2xlbmdrYXAiIG91dGxpbmVkIHNxdWFyZSA6ZGVuc2U9InRydWUiIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIgogICAgICAgICAgICAgICAgICByZXF1aXJlZCAvPgogICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+TklLIC8gTm9tb3IgSWRlbnRpdGFzIChPcHNpb25hbCk8L3NwYW4+CiAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImZvcm0ubmlrIiBvdXRsaW5lZCBzcXVhcmUgOmRlbnNlPSJ0cnVlIiBjbGFzcz0iYmctd2hpdGUgbWFyZ2luX2J0biIgLz4KCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBxLWNvbC1ndXR0ZXItbWQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiI+CiAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5UYW5nZ2FsIExhaGlyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICA8cS1pbnB1dCB2LW1vZGVsPSJmb3JtLnRhbmdnYWxfbGFoaXIiIHR5cGU9ImRhdGUiIG91dGxpbmVkIHNxdWFyZSA6ZGVuc2U9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPkplbmlzIEtlbGFtaW48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgIDxxLXNlbGVjdCB2LW1vZGVsPSJmb3JtLmplbmlzX2tlbGFtaW4iIDpvcHRpb25zPSJbCiAgICAgICAgICAgICAgICAgICAgIHsgbGFiZWw6ICdMYWtpLWxha2knLCB2YWx1ZTogJ0wnIH0sCiAgICAgICAgICAgICAgICAgICAgIHsgbGFiZWw6ICdQZXJlbXB1YW4nLCB2YWx1ZTogJ1AnIH0KICAgICAgICAgICAgICAgICAgXSIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIHJlcXVpcmVkIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBxLWNvbC1ndXR0ZXItbWQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiI+CiAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5FbWFpbCAoT3BzaW9uYWwpPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICA8cS1pbnB1dCB2LW1vZGVsPSJmb3JtLmVtYWlsIiB0eXBlPSJlbWFpbCIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPgogICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+Tm8gSFA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImZvcm0ubm9faHAiIHR5cGU9InRlbCIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIHJlcXVpcmVkIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBxLWNvbC1ndXR0ZXItbWQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5LYWJ1cGF0ZW4gKE9wc2lvbmFsKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgPHEtc2VsZWN0IHYtbW9kZWw9ImZvcm0ua2FidXBhdGVuX2lkIiA6b3B0aW9ucz0ia2FidXBhdGVuT3B0aW9ucyIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIGVtaXQtdmFsdWUgbWFwLW9wdGlvbnMgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5LZWNhbWF0YW4gKE9wc2lvbmFsKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgPHEtc2VsZWN0IHYtbW9kZWw9ImZvcm0ua2VjYW1hdGFuX2lkIiA6b3B0aW9ucz0ia2VjYW1hdGFuT3B0aW9ucyIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIGVtaXQtdmFsdWUgbWFwLW9wdGlvbnMgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5EZXNhL0tlbHVyYWhhbiAoT3BzaW9uYWwpPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICA8cS1zZWxlY3Qgdi1tb2RlbD0iZm9ybS5kZXNfa2VsX2lkIiA6b3B0aW9ucz0iZGVza2VsT3B0aW9ucyIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iIGVtaXQtdmFsdWUgbWFwLW9wdGlvbnMgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPkFsYW1hdCAoT3BzaW9uYWwpPC9zcGFuPgogICAgICAgICAgICAgICA8cS1pbnB1dCB2LW1vZGVsPSJmb3JtLmFsYW1hdCIgdHlwZT0idGV4dGFyZWEiIG91dGxpbmVkIHNxdWFyZSA6ZGVuc2U9InRydWUiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiAvPgoKICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPkZvdG8gUHJvZmlsIChPcHNpb25hbCk8L3NwYW4+CiAgICAgICAgICAgICAgIDxxLWZpbGUgdi1tb2RlbD0iZm9ybS5mb3RvX3Byb2ZpbCIgbGFiZWw9IlBpbGloIEZvdG8iIGFjY2VwdD0iaW1hZ2UvKiIgb3V0bGluZWQgc3F1YXJlIGRlbnNlCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiA6Y2xlYXJhYmxlPSJ0cnVlIiAvPgogICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImZvcm0uZm90b19wcm9maWxfdXJsIiBjbGFzcz0icS1tYi1tZCI+CiAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz0iZm9ybS5mb3RvX3Byb2ZpbF91cmwiIGFsdD0iRm90byBQcm9maWwiIHN0eWxlPSJtYXgtd2lkdGg6IDE1MHB4OyBtYXgtaGVpZ2h0OiAxNTBweDsiIC8+CiAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgPGhyIGNsYXNzPSJocnBhZ2luMiI+CgogICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9sYWJsZSI+VXNlcm5hbWU8L3NwYW4+CiAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImRhdGFrdS51c2VybmFtZSIgb3V0bGluZWQgc3F1YXJlIDpkZW5zZT0idHJ1ZSIgY2xhc3M9ImJnLXdoaXRlIG1hcmdpbl9idG4iCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJNYXN1a2thbiB1c2VybmFtZSBiYXJ1IGppa2EgaW5naW4gdWJhaCIgLz4KCiAgICAgICAgICAgICAgIDxociBjbGFzcz0iaHJwYWdpbjIiPgoKICAgICAgICAgICAgPC9xLWNhcmQtc2VjdGlvbj4KCiAgICAgICAgICAgIDxxLWNhcmQtYWN0aW9ucyBjbGFzcz0iYmctZ3JleS00IG1kbC1mb290ZXIiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgIDxxLWJ0biA6bG9hZGluZz0iYnRuX2VkaXQiIGNvbG9yPSJ3YXJuaW5nIiB0eXBlPSJzdWJtaXQiIGxhYmVsPSJVcGRhdGUiIC8+CiAgICAgICAgICAgICAgIDxxLWJ0biBsYWJlbD0iQmF0YWwiIGNvbG9yPSJuZWdhdGl2ZSIgdi1jbG9zZS1wb3B1cCAvPgogICAgICAgICAgICA8L3EtY2FyZC1hY3Rpb25zPgogICAgICAgICA8L2Zvcm0+CiAgICAgIDwvcS1jYXJkPgogICA8L3EtZGlhbG9nPgoKICAgPCEtLSA9PT09PT09PT09PT09PT09PT09PT0gTU9EQUwgRURJVCBQQVNTV09SRCA9PT09PT09PT09PT09PT09PT09PT0gLS0+CiAgIDxxLWRpYWxvZyB2LW1vZGVsPSJtZGxfcGFzc3dvcmQiIHBlcnNpc3RlbnQ+CiAgICAgIDxxLWNhcmQgY2xhc3M9Im1kbC1tZCI+CiAgICAgICAgIDxxLWNhcmQtc2VjdGlvbiBjbGFzcz0iYmctYmx1ZSB0ZXh0LXdoaXRlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1oNiBoX21vZGFsaGVhZCI+VWJhaCBQYXNzd29yZCBNYXN5YXJha2F0PC9kaXY+CiAgICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CgogICAgICAgICA8Zm9ybSBAc3VibWl0LnByZXZlbnQ9ImVkaXREYXRhUGFzc3dvcmQoKSI+CgogICAgICAgICAgICA8cS1jYXJkLXNlY3Rpb24gY2xhc3M9InEtcHQtbm9uZSI+CgogICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhycGFnaW4yIj4KCiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoX2xhYmxlIj5QYXNzd29yZCBCYXJ1PC9zcGFuPgogICAgICAgICAgICAgICA8cS1pbnB1dCB2LW1vZGVsPSJkYXRha3UucGFzc3dvcmQiIDp0eXBlPSJpc1B3ZCA/ICdwYXNzd29yZCcgOiAndGV4dCciIG91dGxpbmVkIHNxdWFyZSA6ZGVuc2U9InRydWUiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJiZy13aGl0ZSBtYXJnaW5fYnRuIiBwbGFjZWhvbGRlcj0iTWluaW1hbCA2IGthcmFrdGVyIiA6bG9hZGluZz0iYnRuX3Bhc3N3b3JkIiAvPgogICAgICAgICAgICAgICA8cS10b2dnbGUgdi1tb2RlbD0iaXNQd2QiIGljb249InZpc2liaWxpdHkiIGNsYXNzPSJxLXB0LW5vbmUiIC8+CiAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhfbGFibGUiPktvbmZpcm1hc2kgUGFzc3dvcmQ8L3NwYW4+CiAgICAgICAgICAgICAgIDxxLWlucHV0IHYtbW9kZWw9ImRhdGFrdS5jb25maXJtUGFzc3dvcmQiIDp0eXBlPSJpc1B3ZDIgPyAncGFzc3dvcmQnIDogJ3RleHQnIiBvdXRsaW5lZCBzcXVhcmUKICAgICAgICAgICAgICAgICAgOmRlbnNlPSJ0cnVlIiBjbGFzcz0iYmctd2hpdGUgbWFyZ2luX2J0biIgcGxhY2Vob2xkZXI9IlVsYW5naSBwYXNzd29yZCBiYXJ1IiAvPgogICAgICAgICAgICAgICA8cS10b2dnbGUgdi1tb2RlbD0iaXNQd2QyIiBpY29uPSJ2aXNpYmlsaXR5IiBjbGFzcz0icS1wdC1ub25lIiAvPgoKICAgICAgICAgICAgICAgPGhyIGNsYXNzPSJocnBhZ2luMiI+CgogICAgICAgICAgICA8L3EtY2FyZC1zZWN0aW9uPgoKICAgICAgICAgICAgPHEtY2FyZC1hY3Rpb25zIGNsYXNzPSJiZy1ncmV5LTQgbWRsLWZvb3RlciIgYWxpZ249InJpZ2h0Ij4KICAgICAgICAgICAgICAgPHEtYnRuIDpsb2FkaW5nPSJidG5fcGFzc3dvcmQiIGNvbG9yPSJwcmltYXJ5IiB0eXBlPSJzdWJtaXQiIGxhYmVsPSJVYmFoIFBhc3N3b3JkIiAvPgogICAgICAgICAgICAgICA8cS1idG4gbGFiZWw9IkJhdGFsIiBjb2xvcj0ibmVnYXRpdmUiIHYtY2xvc2UtcG9wdXAgQGNsaWNrPSJyZXNldFBhc3N3b3JkRm9ybSIgLz4KICAgICAgICAgICAgPC9xLWNhcmQtYWN0aW9ucz4KICAgICAgICAgPC9mb3JtPgogICAgICA8L3EtY2FyZD4KICAgPC9xLWRpYWxvZz4KCiAgIDwhLS0gPT09PT09PT09PT09PT09PT09PT09IE1PREFMIEhBUFVTID09PT09PT09PT09PT09PT09PT09PSAtLT4KICAgPHEtZGlhbG9nIHYtbW9kZWw9Im1kbF9oYXB1cyIgcGVyc2lzdGVudD4KICAgICAgPHEtY2FyZCBjbGFzcz0ibWRsLXNtIj4KICAgICAgICAgPHEtY2FyZC1zZWN0aW9uIGNsYXNzPSJxLXB0LW5vbmUgdGV4dC1jZW50ZXIgb3JhZ2VHcmFkIj4KICAgICAgICAgICAgPGZvcm0gQHN1Ym1pdC5wcmV2ZW50PSJoYXB1c0RhdGEiPgogICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWcvYWxlcnQucG5nIiBhbHQ9IiIgd2lkdGg9Ijc1Ij4gPGJyPgogICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaF9ub3RpZmlrYXNpIj5BUEFLQUggQU5EQSBZQUtJTiBJTkdJTiBNRU5HSEFQVVMgREFUQSBJTkk/Pzwvc3Bhbj4KICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICA8YnI+CgogICAgICAgICAgICAgICA8cS1jYXJkLWFjdGlvbnMgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDxxLWJ0biBsYWJlbD0iQmF0YWwiIHNpemU9InNtIiBjb2xvcj0ibmVnYXRpdmUiIHYtY2xvc2UtcG9wdXAgQGNsaWNrPSJyZXNldEhhcHVzRm9ybSIgLz4KICAgICAgICAgICAgICAgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgIDxxLWJ0biA6bG9hZGluZz0iYnRuX2hhcHVzIiB0eXBlPSJzdWJtaXQiIGxhYmVsPSJIYXB1cyIgc2l6ZT0ic20iIGNvbG9yPSJwcmltYXJ5IiB2LWNsb3NlLXBvcHVwIC8+CiAgICAgICAgICAgICAgIDwvcS1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgPC9xLWNhcmQtc2VjdGlvbj4KICAgICAgPC9xLWNhcmQ+CiAgIDwvcS1kaWFsb2c+CgogICA8IS0tID09PT09PT09PT09PT09PT09PT09PSBNT0RBTCBMSUhBVCBERVRBSUwgPT09PT09PT09PT09PT09PT09PT09IC0tPgogICA8cS1kaWFsb2cgdi1tb2RlbD0ibWRsX2xpaGF0IiBwZXJzaXN0ZW50PgogICAgICA8cS1jYXJkIGNsYXNzPSJtZGwtbWQgZGV0YWlsLW1vZGFsIiBzdHlsZT0iYm94LXNoYWRvdzogMCA4cHggMzJweCByZ2JhKDAsIDAsIDAsIDAuMTIpOyBib3JkZXItcmFkaXVzOiAxMnB4OyI+CiAgICAgICAgIDxxLWNhcmQtc2VjdGlvbiBjbGFzcz0iYmctZ3JlZW4gdGV4dC13aGl0ZSBxLXBhLWxnIiBzdHlsZT0iYm9yZGVyLXJhZGl1czogMTJweCAxMnB4IDAgMDsiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWg2IGhfbW9kYWxoZWFkIGZsZXggaXRlbXMtY2VudGVyIHEtZ3V0dGVyLXNtIj4KICAgICAgICAgICAgICAgPHEtaWNvbiBuYW1lPSJwZXJzb24iIHNpemU9IjI0cHgiIC8+CiAgICAgICAgICAgICAgIDxzcGFuPkRldGFpbCBNYXN5YXJha2F0PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9xLWNhcmQtc2VjdGlvbj4KICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIHRleHQtY2VudGVyIHEtbWIteHMiPgogICAgICAgICAgICA8ZGl2IHYtaWY9ImxpaGF0RGF0YS5mb3RvX3Byb2ZpbCIgY2xhc3M9InEtcGEtbWQiPgogICAgICAgICAgICAgICA8aW1nIDpzcmM9ImZpbGVfcGF0aCArIGxpaGF0RGF0YS5mb3RvX3Byb2ZpbCIgYWx0PSJGb3RvIFByb2ZpbCBNYXN5YXJha2F0IgogICAgICAgICAgICAgICAgICBzdHlsZT0ibWF4LXdpZHRoOiAyMDBweDsgbWF4LWhlaWdodDogMjAwcHg7IG9iamVjdC1maXQ6IGNvdmVyOyBib3JkZXItcmFkaXVzOiAxMnB4OyBib3gtc2hhZG93OiAwIDRweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4xKTsiCiAgICAgICAgICAgICAgICAgIEBlcnJvcj0iaGFuZGxlSW1hZ2VFcnJvciIgLz4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jYXB0aW9uIHRleHQtZ3JleS02IHEtbXQtc20iPkZvdG8gUHJvZmlsPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IHYtZWxzZSBjbGFzcz0icS1wYS1tZCBiZy1ncmV5LTEgcm91bmRlZCIKICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMDBweDsgaGVpZ2h0OiAyMDBweDsgZGlzcGxheTogaW5saW5lLWZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGp1c3RpZnktY29udGVudDogY2VudGVyOyBib3JkZXItcmFkaXVzOiAxMnB4OyBib3JkZXI6IDJweCBkYXNoZWQgZ3JleS00OyI+CiAgICAgICAgICAgICAgIDxxLWljb24gbmFtZT0iYWNjb3VudF9jaXJjbGVfb2ZmIiBzaXplPSI2NHB4IiBjb2xvcj0iZ3JleS01IiAvPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWg2IHRleHQtZ3JleS02IHEtbXQtc20iPlRpZGFrIEFkYSBGb3RvIFByb2ZpbDwvZGl2PgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNhcHRpb24gdGV4dC1ncmV5LTcgcS1tdC14cyI+Rm90byBiZWx1bSBkaXVuZ2dhaDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgPHEtY2FyZC1zZWN0aW9uIGNsYXNzPSJxLXBhLW1kIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHEtY29sLWd1dHRlci1sZyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtaDYgdGV4dC1ncmV5LTggcS1tYi1tZCBxLXBhLXNtIGJnLWdyZXktMiByb3VuZGVkIgogICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjNGNhZjUwOyI+CiAgICAgICAgICAgICAgICAgICAgIERhdGEgUHJpYmFkaQogICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InEtZ3V0dGVyLXktbWQiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaXRlbXMtc3RhcnQgcS1ndXR0ZXItc20gZGV0YWlsLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHEtaWNvbiBuYW1lPSJwZXJzb24iIHNpemU9IjE2cHgiIGNvbG9yPSJncmV5LTYiIGNsYXNzPSJxLW10LXhzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNhcHRpb24gdGV4dC1ncmV5LTcgdGV4dC13ZWlnaHQtbWVkaXVtIHEtbWIteHMiPk5hbWEgTGVuZ2thcDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJvZHkxIHRleHQtd2VpZ2h0LWJvbGQgdGV4dC1ncmV5LTkiPnt7IGxpaGF0RGF0YS5uYW1hX2xlbmdrYXAgfHwgJy0nIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaXRlbXMtc3RhcnQgcS1ndXR0ZXItc20gZGV0YWlsLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHEtaWNvbiBuYW1lPSJldmVudCIgc2l6ZT0iMTZweCIgY29sb3I9ImdyZXktNiIgY2xhc3M9InEtbXQteHMiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2FwdGlvbiB0ZXh0LWdyZXktNyB0ZXh0LXdlaWdodC1tZWRpdW0gcS1tYi14cyI+VGFuZ2dhbCBMYWhpcjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJvZHkxIHRleHQtd2VpZ2h0LWJvbGQgdGV4dC1ncmV5LTkiPnt7CiAgICAgICAgICAgICAgICAgICAgIFVNVU0udGdsQ29udmVydChsaWhhdERhdGEudGFuZ2dhbF9sYWhpcikgfHwKICAgICAgICAgICAgICAgICAgICAgJy0nIH19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBpdGVtcy1zdGFydCBxLWd1dHRlci1zbSBkZXRhaWwtZmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cS1pY29uIG5hbWU9IndjIiBzaXplPSIxNnB4IiBjb2xvcj0iZ3JleS02IiBjbGFzcz0icS1tdC14cyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jYXB0aW9uIHRleHQtZ3JleS03IHRleHQtd2VpZ2h0LW1lZGl1bSBxLW1iLXhzIj5KZW5pcyBLZWxhbWluPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtYm9keTEgdGV4dC13ZWlnaHQtYm9sZCB0ZXh0LWdyZXktOSI+e3sgbGloYXREYXRhLmplbmlzX2tlbGFtaW4gPT09ICdMJyA/CiAgICAgICAgICAgICAgICAgICAgICdMYWtpLWxha2knIDogbGloYXREYXRhLmplbmlzX2tlbGFtaW4gPT09ICdQJyA/ICdQZXJlbXB1YW4nIDogJy0nIH19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBpdGVtcy1zdGFydCBxLWd1dHRlci1zbSBkZXRhaWwtZmllbGQiIHYtaWY9ImxpaGF0RGF0YS5uaWsiPgogICAgICAgICAgICAgICAgICAgICAgICA8cS1pY29uIG5hbWU9ImNhcmRfbWVtYmVyc2hpcCIgc2l6ZT0iMTZweCIgY29sb3I9ImdyZXktNiIgY2xhc3M9InEtbXQteHMiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2FwdGlvbiB0ZXh0LWdyZXktNyB0ZXh0LXdlaWdodC1tZWRpdW0gcS1tYi14cyI+TklLIC8gTm9tb3IgSWRlbnRpdGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJvZHkxIHRleHQtd2VpZ2h0LWJvbGQgdGV4dC1ncmV5LTkiPnt7IGxpaGF0RGF0YS5uaWsgfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWg2IHRleHQtZ3JleS04IHEtbWItbWQgcS1wYS1zbSBiZy1ncmV5LTIgcm91bmRlZCIKICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJvcmRlci1sZWZ0OiA0cHggc29saWQgIzRjYWY1MDsiPgogICAgICAgICAgICAgICAgICAgICBEYXRhIEtvbnRhayAmIExva2FzaQogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icS1ndXR0ZXIteS1tZCI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBpdGVtcy1zdGFydCBxLWd1dHRlci1zbSBkZXRhaWwtZmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cS1pY29uIG5hbWU9ImVtYWlsIiBzaXplPSIxNnB4IiBjb2xvcj0iZ3JleS02IiBjbGFzcz0icS1tdC14cyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jYXB0aW9uIHRleHQtZ3JleS03IHRleHQtd2VpZ2h0LW1lZGl1bSBxLW1iLXhzIj5FbWFpbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJvZHkxIHRleHQtd2VpZ2h0LWJvbGQgdGV4dC1ncmV5LTkiPnt7IGxpaGF0RGF0YS5lbWFpbCB8fCAnLScgfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGl0ZW1zLXN0YXJ0IHEtZ3V0dGVyLXNtIGRldGFpbC1maWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxLWljb24gbmFtZT0icGhvbmUiIHNpemU9IjE2cHgiIGNvbG9yPSJncmV5LTYiIGNsYXNzPSJxLW10LXhzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNhcHRpb24gdGV4dC1ncmV5LTcgdGV4dC13ZWlnaHQtbWVkaXVtIHEtbWIteHMiPk5vIEhQPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtYm9keTEgdGV4dC13ZWlnaHQtYm9sZCB0ZXh0LWdyZXktOSI+e3sgbGloYXREYXRhLm5vX2hwIHx8ICctJyB9fTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaXRlbXMtc3RhcnQgcS1ndXR0ZXItc20gZGV0YWlsLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHEtaWNvbiBuYW1lPSJsb2NhdGlvbl9vbiIgc2l6ZT0iMTZweCIgY29sb3I9ImdyZXktNiIgY2xhc3M9InEtbXQteHMiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2FwdGlvbiB0ZXh0LWdyZXktNyB0ZXh0LXdlaWdodC1tZWRpdW0gcS1tYi14cyI+QWxhbWF0IExlbmdrYXA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1ib2R5MSB0ZXh0LXdlaWdodC1ib2xkIHRleHQtZ3JleS05Ij57eyBsaWhhdERhdGEuYWxhbWF0IHx8ICctJyB9fTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgaXRlbXMtc3RhcnQgcS1ndXR0ZXItc20gZGV0YWlsLWZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHEtaWNvbiBuYW1lPSJtYXAiIHNpemU9IjE2cHgiIGNvbG9yPSJncmVuLTYiIGNsYXNzPSJxLW10LXhzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNhcHRpb24gdGV4dC1ncmV5LTcgdGV4dC13ZWlnaHQtbWVkaXVtIHEtbWIteHMiPkxva2FzaTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJvZHkxIHRleHQtd2VpZ2h0LWJvbGQgdGV4dC1ncmV5LTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBbbGloYXREYXRhLm5hbWFfa2FidXBhdGVuLCBsaWhhdERhdGEubmFtYV9rZWNhbWF0YW4sCiAgICAgICAgICAgICAgICAgIGxpaGF0RGF0YS5uYW1hX2Rlc19rZWxdLmZpbHRlcihCb29sZWFuKS5qb2luKCcsICcpIHx8ICctJyB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGl0ZW1zLXN0YXJ0IHEtZ3V0dGVyLXNtIGRldGFpbC1maWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxLWljb24gbmFtZT0iYWNjb3VudF9jaXJjbGUiIHNpemU9IjE2cHgiIGNvbG9yPSJncmV5LTYiIGNsYXNzPSJxLW10LXhzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNhcHRpb24gdGV4dC1ncmV5LTcgdGV4dC13ZWlnaHQtbWVkaXVtIHEtbWIteHMiPlVzZXJuYW1lPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtYm9keTEgdGV4dC13ZWlnaHQtYm9sZCB0ZXh0LWdyZXktOSI+e3sgbGloYXREYXRhLnVzZXJuYW1lIHx8ICctJyB9fTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+CgogICAgICAgICA8cS1jYXJkLWFjdGlvbnMgYWxpZ249InJpZ2h0IiBjbGFzcz0iYmctZ3JleS0yIHRleHQtZ3JleS04IHEtcGEtbGciIHN0eWxlPSJib3JkZXItcmFkaXVzOiAwIDAgMTJweCAxMnB4OyI+CiAgICAgICAgICAgIDxxLWJ0biBsYWJlbD0iVHV0dXAiIGNvbG9yPSJuZWdhdGl2ZSIgdi1jbG9zZS1wb3B1cCB1bmVsZXZhdGVkIHNpemU9Im1kIiAvPgogICAgICAgICA8L3EtY2FyZC1hY3Rpb25zPgogICAgICA8L3EtY2FyZD4KICAgPC9xLWRpYWxvZz4KPC9kaXY+Cgo="},null]}