{"remainingRequest":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/babel-loader/lib/index.js!/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/quasar/src/utils/run-sequential-promises.js","dependencies":[{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/quasar/src/utils/run-sequential-promises.js","mtime":1758930417104},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/babel.config.js","mtime":1755527684372},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/cache-loader/dist/cjs.js","mtime":1758930418112},{"path":"/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/babel-loader/lib/index.js","mtime":1758930419036}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gcGFyc2VQcm9taXNlcyhzZXF1ZW50aWFsUHJvbWlzZXMpIHsKICBjb25zdCBpc0xpc3QgPSBBcnJheS5pc0FycmF5KHNlcXVlbnRpYWxQcm9taXNlcyk7CiAgaWYgKGlzTGlzdCA9PT0gdHJ1ZSkgewogICAgY29uc3QgdG90YWxKb2JzID0gc2VxdWVudGlhbFByb21pc2VzLmxlbmd0aDsKICAgIHJldHVybiB7CiAgICAgIGlzTGlzdCwKICAgICAgdG90YWxKb2JzLAogICAgICByZXN1bHRBZ2dyZWdhdG9yOiBBcnJheSh0b3RhbEpvYnMpLmZpbGwobnVsbCkKICAgIH07CiAgfQogIGNvbnN0IHJlc3VsdEtleXMgPSBPYmplY3Qua2V5cyhzZXF1ZW50aWFsUHJvbWlzZXMpOwogIGNvbnN0IHJlc3VsdEFnZ3JlZ2F0b3IgPSB7fTsKICByZXN1bHRLZXlzLmZvckVhY2goa2V5TmFtZSA9PiB7CiAgICByZXN1bHRBZ2dyZWdhdG9yW2tleU5hbWVdID0gbnVsbDsKICB9KTsKICByZXR1cm4gewogICAgaXNMaXN0LAogICAgdG90YWxKb2JzOiByZXN1bHRLZXlzLmxlbmd0aCwKICAgIHJlc3VsdEFnZ3JlZ2F0b3IsCiAgICByZXN1bHRLZXlzCiAgfTsKfQoKLyoqCiAqIFJ1biBhIGxpc3Qgb2YgUHJvbWlzZXMgc2VxdWVudGlhbGx5LCBvcHRpb25hbGx5IG9uIG11bHRpcGxlIHRocmVhZHMuCiAqCiAqIEBwYXJhbSB7Kn0gc2VxdWVudGlhbFByb21pc2VzIC0gQXJyYXkgb2YgRnVuY3Rpb25zIG9yIE9iamVjdCB3aXRoIEZ1bmN0aW9ucyBhcyB2YWx1ZXMKICogICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5IG9mIEZ1bmN0aW9uIGZvcm06IFsgKHJlc3VsdEFnZ3JlZ2F0b3I6IEFycmF5KSA9PiBQcm9taXNlPGFueT4sIC4uLiBdCiAqICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QgZm9ybTogeyBba2V5OiBzdHJpbmddOiAocmVzdWx0QWdncmVnYXRvcjogb2JqZWN0KSA9PiBQcm9taXNlPGFueT4sIC4uLiB9CiAqIEBwYXJhbSB7Kn0gb3B0cyAtIE9wdGlvbmFsIG9wdGlvbnMgT2JqZWN0CiAqICAgICAgICAgICAgICAgICAgIE9iamVjdCBmb3JtOiB7IHRocmVhZHNOdW1iZXI/OiBudW1iZXIsIGFib3J0T25GYWlsPzogYm9vbGVhbiB9CiAqICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IHsgdGhyZWFkc051bWJlcjogMSwgYWJvcnRPbkZhaWw6IHRydWUgfQogKiAgICAgICAgICAgICAgICAgICBXaGVuIGNvbmZpZ3VyaW5nIHRocmVhZHNOdW1iZXIgQU5EIHVzaW5nIGh0dHAgcmVxdWVzdHMsIGJlCiAqICAgICAgICAgICAgICAgICAgICAgICBhd2FyZSBvZiB0aGUgbWF4aW11bSB0aHJlYWRzIHRoYXQgdGhlIGhvc3RpbmcgYnJvd3NlcgogKiAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydHMgKHVzdWFsbHkgNSk7IGFueSBudW1iZXIgb2YgdGhyZWFkcyBhYm92ZSB0aGF0CiAqICAgICAgICAgICAgICAgICAgICAgICB3b24ndCBhZGQgYW55IHJlYWwgYmVuZWZpdHMKICogQHJldHVybnMgUHJvbWlzZTxBcnJheTxPYmplY3Q+IHwgT2JqZWN0PgogKiAgICBXaXRoIG9wdHMuYWJvcnRPbkZhaWwgc2V0IHRvIHRydWUgKHdoaWNoIGlzIGRlZmF1bHQpOgogKiAgICAgICAgV2hlbiBzZXF1ZW50aWFsUHJvbWlzZXMgcGFyYW0gaXMgQXJyYXk6CiAqICAgICAgICAgIFRoZSBQcm9taXNlIHJlc29sdmVzIHdpdGggYW4gQXJyYXkgb2YgT2JqZWN0cyBvZiB0aGUgZm9sbG93aW5nIGZvcm06CiAqICAgICAgICAgICAgIFsgeyBrZXk6IG51bWJlciwgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IGFueSB9LCAuLi4gXQogKiAgICAgICAgICBUaGUgUHJvbWlzZSByZWplY3RzIHdpdGggYW4gT2JqZWN0IG9mIHRoZSBmb2xsb3dpbmcgZm9ybToKICogICAgICAgICAgICAgeyBrZXk6IG51bWJlciwgc3RhdHVzOiAncmVqZWN0ZWQnLCByZWFzb246IEVycm9yLCByZXN1bHRBZ2dyZWdhdG9yOiBhcnJheSB9CiAqICAgICAgICBXaGVuIHNlcXVlbnRpYWxQcm9taXNlcyBwYXJhbSBpcyBPYmplY3Q6CiAqICAgICAgICAgIFRoZSBQcm9taXNlIHJlc29sdmVzIHdpdGggYW4gT2JqZWN0IG9mIHRoZSBmb2xsb3dpbmcgZm9ybToKICogICAgICAgICAgICAgeyBba2V5OiBzdHJpbmddOiB7IGtleTogc3RyaW5nLCBzdGF0dXM6ICdmdWxmaWxsZWQnLCB2YWx1ZTogYW55IH0sIC4uLiB9CiAqICAgICAgICAgIFRoZSBQcm9taXNlIHJlamVjdHMgd2l0aCBhbiBPYmplY3Qgb2YgdGhlIGZvbGxvd2luZyBmb3JtOgogKiAgICAgICAgICAgICB7IGtleTogc3RyaW5nLCBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogRXJyb3IsIHJlc3VsdEFnZ3JlZ2F0b3I6IG9iamVjdCB9CiAqICAgIFdpdGggb3B0cy5hYm9ydE9uRmFpbCBzZXQgdG8gZmFsc2U6CiAqICAgICAgIFRoZSBQcm9taXNlIGlzIG5ldmVyIHJlamVjdGVkIChubyBjYXRjaCgpIG5lZWRlZCkKICogICAgICAgVGhlIFByb21pc2UgcmVzb2x2ZXMgd2l0aDoKICogICAgICAgICAgQW4gQXJyYXkgb2YgT2JqZWN0cyAod2hlbiBzZXF1ZW50aWFsUHJvbWlzZXMgcGFyYW0gaXMgYWxzbyBhbiBBcnJheSkgb2YgdGhlIGZvbGxvd2luZyBmb3JtOgogKiAgICAgICAgICAgICBbIHsga2V5OiBudW1iZXIsIHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiBhbnkgfSB8IHsgc3RhdHVzOiAncmVqZWN0ZWQnLCByZWFzb246IEVycm9yIH0sIC4uLiBdCiAqICAgICAgICAgIEFuIE9iamVjdCAod2hlbiBzZXF1ZW50aWFsUHJvbWlzZXMgcGFyYW0gaXMgYWxzbyBhbiBPYmplY3QpIG9mIHRoZSBmb2xsb3dpbmcgZm9ybToKICogICAgICAgICAgICAgeyBba2V5OiBzdHJpbmddOiB7IGtleTogc3RyaW5nLCBzdGF0dXM6ICdmdWxmaWxsZWQnLCB2YWx1ZTogYW55IH0gfCB7IGtleTogc3RyaW5nLCBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogRXJyb3IgfSwgLi4uIH0KICovCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJ1blNlcXVlbnRpYWxQcm9taXNlcyhzZXF1ZW50aWFsUHJvbWlzZXMsIHsKICB0aHJlYWRzTnVtYmVyID0gMSwKICBhYm9ydE9uRmFpbCA9IHRydWUKfSA9IHt9KSB7CiAgbGV0IGpvYkluZGV4ID0gLTEsCiAgICBoYXNBYm9ydGVkID0gZmFsc2U7CiAgY29uc3QgewogICAgaXNMaXN0LAogICAgdG90YWxKb2JzLAogICAgcmVzdWx0QWdncmVnYXRvciwKICAgIHJlc3VsdEtleXMKICB9ID0gcGFyc2VQcm9taXNlcyhzZXF1ZW50aWFsUHJvbWlzZXMpOwogIGNvbnN0IGdldFByb21pc2VUaHJlYWQgPSAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICBmdW5jdGlvbiBydW5OZXh0UHJvbWlzZSgpIHsKICAgICAgY29uc3QgY3VycmVudEpvYkluZGV4ID0gKytqb2JJbmRleDsKICAgICAgaWYgKGhhc0Fib3J0ZWQgPT09IHRydWUgfHwgY3VycmVudEpvYkluZGV4ID49IHRvdGFsSm9icykgewogICAgICAgIHJlc29sdmUoKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3Qga2V5ID0gaXNMaXN0ID09PSB0cnVlID8gY3VycmVudEpvYkluZGV4IDogcmVzdWx0S2V5c1tjdXJyZW50Sm9iSW5kZXhdOwogICAgICBzZXF1ZW50aWFsUHJvbWlzZXNba2V5XShyZXN1bHRBZ2dyZWdhdG9yKS50aGVuKHZhbHVlID0+IHsKICAgICAgICBpZiAoaGFzQWJvcnRlZCA9PT0gdHJ1ZSkgewogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgcmV0dXJuOyAvLyBlYXJseSBleGl0CiAgICAgICAgfQoKICAgICAgICByZXN1bHRBZ2dyZWdhdG9yW2tleV0gPSB7CiAgICAgICAgICBrZXksCiAgICAgICAgICBzdGF0dXM6ICdmdWxmaWxsZWQnLAogICAgICAgICAgdmFsdWUKICAgICAgICB9OwoKICAgICAgICAvLyB0aW1lb3V0IHNvIGl0IGRvZXNuJ3QgaW50ZXJmZXJlIHdpdGggdGhlIC5jYXRjaCgpIGJlbG93CiAgICAgICAgc2V0VGltZW91dChydW5OZXh0UHJvbWlzZSk7CiAgICAgIH0pLmNhdGNoKHJlYXNvbiA9PiB7CiAgICAgICAgaWYgKGhhc0Fib3J0ZWQgPT09IHRydWUpIHsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgIHJldHVybjsgLy8gZWFybHkgZXhpdAogICAgICAgIH0KCiAgICAgICAgY29uc3QgcmVzdWx0ID0gewogICAgICAgICAga2V5LAogICAgICAgICAgc3RhdHVzOiAncmVqZWN0ZWQnLAogICAgICAgICAgcmVhc29uCiAgICAgICAgfTsKICAgICAgICByZXN1bHRBZ2dyZWdhdG9yW2tleV0gPSByZXN1bHQ7CiAgICAgICAgaWYgKGFib3J0T25GYWlsID09PSB0cnVlKSB7CiAgICAgICAgICBoYXNBYm9ydGVkID0gdHJ1ZTsKICAgICAgICAgIHJlamVjdCh7CiAgICAgICAgICAgIC4uLnJlc3VsdCwKICAgICAgICAgICAgcmVzdWx0QWdncmVnYXRvcgogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm47IC8vIGVhcmx5IGV4aXQKICAgICAgICB9CgogICAgICAgIC8vIHRpbWVvdXQgc28gbm8gaW50ZXJmZXJlbmNlCiAgICAgICAgc2V0VGltZW91dChydW5OZXh0UHJvbWlzZSk7CiAgICAgIH0pOwogICAgfQogICAgcnVuTmV4dFByb21pc2UoKTsKICB9KTsKICBjb25zdCB0aHJlYWRzID0gQXJyYXkodGhyZWFkc051bWJlcikuZmlsbChnZXRQcm9taXNlVGhyZWFkKCkpOwogIHJldHVybiBQcm9taXNlLmFsbCh0aHJlYWRzKS50aGVuKCgpID0+IHJlc3VsdEFnZ3JlZ2F0b3IpOwp9"},{"version":3,"names":["parsePromises","sequentialPromises","isList","Array","isArray","totalJobs","length","resultAggregator","fill","resultKeys","Object","keys","forEach","keyName","runSequentialPromises","threadsNumber","abortOnFail","jobIndex","hasAborted","getPromiseThread","Promise","resolve","reject","runNextPromise","currentJobIndex","key","then","value","status","setTimeout","catch","reason","result","threads","all"],"sources":["/Users/simplephi/Documents/riswan/stock_darah/admin/node_modules/quasar/src/utils/run-sequential-promises.js"],"sourcesContent":["\nfunction parsePromises (sequentialPromises) {\n  const isList = Array.isArray(sequentialPromises)\n\n  if (isList === true) {\n    const totalJobs = sequentialPromises.length\n    return {\n      isList,\n      totalJobs,\n      resultAggregator: Array(totalJobs).fill(null)\n    }\n  }\n\n  const resultKeys = Object.keys(sequentialPromises)\n  const resultAggregator = {}\n  resultKeys.forEach(keyName => { resultAggregator[ keyName ] = null })\n\n  return {\n    isList,\n    totalJobs: resultKeys.length,\n    resultAggregator,\n    resultKeys\n  }\n}\n\n/**\n * Run a list of Promises sequentially, optionally on multiple threads.\n *\n * @param {*} sequentialPromises - Array of Functions or Object with Functions as values\n *                          Array of Function form: [ (resultAggregator: Array) => Promise<any>, ... ]\n *                          Object form: { [key: string]: (resultAggregator: object) => Promise<any>, ... }\n * @param {*} opts - Optional options Object\n *                   Object form: { threadsNumber?: number, abortOnFail?: boolean }\n *                   Default: { threadsNumber: 1, abortOnFail: true }\n *                   When configuring threadsNumber AND using http requests, be\n *                       aware of the maximum threads that the hosting browser\n *                       supports (usually 5); any number of threads above that\n *                       won't add any real benefits\n * @returns Promise<Array<Object> | Object>\n *    With opts.abortOnFail set to true (which is default):\n *        When sequentialPromises param is Array:\n *          The Promise resolves with an Array of Objects of the following form:\n *             [ { key: number, status: 'fulfilled', value: any }, ... ]\n *          The Promise rejects with an Object of the following form:\n *             { key: number, status: 'rejected', reason: Error, resultAggregator: array }\n *        When sequentialPromises param is Object:\n *          The Promise resolves with an Object of the following form:\n *             { [key: string]: { key: string, status: 'fulfilled', value: any }, ... }\n *          The Promise rejects with an Object of the following form:\n *             { key: string, status: 'rejected', reason: Error, resultAggregator: object }\n *    With opts.abortOnFail set to false:\n *       The Promise is never rejected (no catch() needed)\n *       The Promise resolves with:\n *          An Array of Objects (when sequentialPromises param is also an Array) of the following form:\n *             [ { key: number, status: 'fulfilled', value: any } | { status: 'rejected', reason: Error }, ... ]\n *          An Object (when sequentialPromises param is also an Object) of the following form:\n *             { [key: string]: { key: string, status: 'fulfilled', value: any } | { key: string, status: 'rejected', reason: Error }, ... }\n */\nexport default function runSequentialPromises (\n  sequentialPromises,\n  { threadsNumber = 1, abortOnFail = true } = {}\n) {\n  let jobIndex = -1, hasAborted = false\n\n  const { isList, totalJobs, resultAggregator, resultKeys } = parsePromises(sequentialPromises)\n\n  const getPromiseThread = () => new Promise((resolve, reject) => {\n    function runNextPromise () {\n      const currentJobIndex = ++jobIndex\n\n      if (hasAborted === true || currentJobIndex >= totalJobs) {\n        resolve()\n        return\n      }\n\n      const key = isList === true ? currentJobIndex : resultKeys[ currentJobIndex ]\n\n      sequentialPromises[ key ](resultAggregator)\n        .then(value => {\n          if (hasAborted === true) {\n            resolve()\n            return // early exit\n          }\n\n          resultAggregator[ key ] = { key, status: 'fulfilled', value }\n\n          // timeout so it doesn't interfere with the .catch() below\n          setTimeout(runNextPromise)\n        })\n        .catch(reason => {\n          if (hasAborted === true) {\n            resolve()\n            return // early exit\n          }\n\n          const result = { key, status: 'rejected', reason }\n          resultAggregator[ key ] = result\n\n          if (abortOnFail === true) {\n            hasAborted = true\n            reject({ ...result, resultAggregator })\n            return // early exit\n          }\n\n          // timeout so no interference\n          setTimeout(runNextPromise)\n        })\n    }\n\n    runNextPromise()\n  })\n\n  const threads = Array(threadsNumber).fill(getPromiseThread())\n  return Promise.all(threads).then(() => resultAggregator)\n}\n"],"mappings":"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"}]}